Index: src/Terminal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.nio.file.Paths;\r\nimport java.util.Date;\r\nimport java.util.Scanner;\r\n\r\npublic class Terminal {\r\n    public String workDir;\r\n    public Terminal(){\r\n        workDir = getWorkDirectory();\r\n    }\r\n    public static String getWorkDirectory(){\r\n        return System.getProperty(\"user.dir\");\r\n    }\r\n    public static boolean PathExist(String path){\r\n        File file = new File(path);\r\n        return file.exists();\r\n    }\r\n    public String Absolute(String path){\r\n        File file = new File(path);\r\n        if(file.isAbsolute()){\r\n            return path;\r\n        }\r\n        return workDir + path;\r\n    }\r\n    public static boolean IsFile(String path){\r\n        File file = new File(path);\r\n        return file.isFile();\r\n    }\r\n    public static boolean IsDirectory(String path){\r\n        File file = new File(path);\r\n        return file.isDirectory();\r\n    }\r\n    public String readFile(String path) {\r\n        String content = \"\";\r\n        if (!PathExist(path)) {\r\n            System.out.println(\"Error:This Path Not Exist.\");\r\n        } else if (!IsFile(path)) {\r\n            System.out.println(\"Error:This Path Related to Directory Not File.\");\r\n        } else {\r\n            try {\r\n                File file = new File(path);\r\n                Scanner readScaner = new Scanner(file);\r\n                while (readScaner.hasNextLine()) {\r\n                    content += readScaner.nextLine() + \"\\n\";\r\n                }\r\n                readScaner.close();\r\n            } catch (FileNotFoundException e) {\r\n                System.out.println(\"Error:Cant Open File.\");\r\n            }\r\n        }\r\n        return content;\r\n    }\r\n    public void writeFile(String path, String data) {\r\n        if (!PathExist(path)) {\r\n            System.out.println(\"Error:This Path Not Exist.\");\r\n        } else if (!IsFile(path)) {\r\n            System.out.println(\"Error:This Path Related to Directory Not File.\");\r\n        } else {\r\n            try {\r\n                FileWriter obWriter = new FileWriter(path);\r\n                obWriter.write(data);\r\n                obWriter.flush();\r\n                obWriter.close();\r\n                System.out.println(\"Successfully wrote to the file.\");\r\n            } catch (IOException e) {\r\n                System.out.println(\"Error:Cant Open File For Write.\");\r\n            }\r\n        }\r\n    }\r\n    public String createFile(String path){\r\n        File myObj = new File(path);\r\n            try {\r\n                if (myObj.createNewFile()) {\r\n                    System.out.println(\"File created: \" + myObj.getName());\r\n                } else {\r\n                    System.out.println(\"File already exists.\");\r\n                }\r\n            } catch (IOException e) {\r\n                System.out.println(\"An error occurred.\");\r\n            }\r\n        return myObj.getAbsolutePath();\r\n    }\r\n    public void Date(){ //function to print the current date and time\r\n        Date date = new Date();\r\n        System.out.println(date.toString());\r\n    }\r\n\r\n    public void mkdir(String path){\r\n        File newFolder = new File(path);\r\n        if (newFolder.mkdir()) {\r\n            System.out.println(\"Directory is created\");\r\n        }\r\n        else if(newFolder.exists()){\r\n            System.out.println(\"Directory already exists\");\r\n        }\r\n\r\n        else {\r\n            System.out.println(\"Directory cannot be created\");\r\n        }\r\n    }\r\n\r\n    public void rmdir(String path){\r\n        File newFolder = new File(path);\r\n        mkdir(newFolder.getAbsolutePath());\r\n        String[] folders = ls(newFolder.getAbsolutePath());\r\n        if(folders.length() == 0)\r\n        {\r\n            newFolder.delete();\r\n            System.out.println(\"Directory deleted\");\r\n        }\r\n        else {\r\n            System.out.println(\"Directory is not empty, can not delete it\");\r\n        }\r\n        /*mkdir(path);\r\n        String[] folders = ls(path);\r\n        if(folders.length() == 0)\r\n        {\r\n            rm(path);\r\n            System.out.println(\"Directory deleted\");\r\n        }\r\n        else {\r\n            System.out.println(\"Directory is not empty, can not delete it\");\r\n        }*/\r\n    }\r\n    public void mv(String sourcePath, String destinationPath){\r\n\r\n    }\r\n    public void rm(String path){\r\n        File newFile = new File(path);\r\n        if(newFile.exists()){\r\n            newFile.delete();\r\n        }\r\n        else{\r\n            System.out.println(\"File not found\");\r\n        }\r\n\r\n    }\r\n    public void pwd(){\r\n        System.out.println();\r\n        //print current path\r\n    }\r\n    public void args(String cmd){\r\n        String command = cmd.toLowerCase();\r\n        if(command.equals(\"cd\") ){\r\n            System.out.println(\"arg1: new directory path\");\r\n        }\r\n        else if(command.equals(\"ls\") ){\r\n            System.out.println(\"arg1: directory path\");\r\n        }\r\n        else if(command.equals(\"cp\") ){\r\n            System.out.println(\"arg1: source path  -  arg2: destination path\");\r\n        }\r\n        else if(command.equals(\"cat\") ){\r\n            System.out.println(\"arg1: directory path\");\r\n        }\r\n        else if(command.equals(\"more\") ){\r\n            System.out.println(\"arg1: directory path\");\r\n        }\r\n        else if(command.equals(\"mkdir\") ){\r\n            System.out.println(\"arg1: directory path\");\r\n        }\r\n        else if(command.equals(\"rmdir\") ){\r\n            System.out.println(\"arg1: directory path\");\r\n        }\r\n        else if(command.equals(\"mv\") ){\r\n            System.out.println(\"arg1: source path  -  arg2: destination path\");\r\n        }\r\n        else if(command.equals(\"rm\") ){\r\n            System.out.println(\"arg1: directory path\");\r\n        }\r\n        else if( command.equals(\"args\") ){\r\n            System.out.println(\"arg1: command name\");\r\n        }\r\n        else if(command.equals(\"date\") ){\r\n            System.out.println(\"no arguments\");\r\n        }\r\n        else if(command.equals(\"help\") ){\r\n            System.out.println(\"no arguments\");\r\n        }\r\n        else if(command.equals(\"pwd\") ){\r\n            System.out.println(\"no arguments\");\r\n        }\r\n        else if(command.equals(\"clear\") ){\r\n            System.out.println(\"no arguments\");\r\n        }\r\n        else{\r\n            System.out.println(\"Please enter a correct command and to know the commands type HELP\");\r\n        }\r\n\r\n    }\r\n    public void help()\r\n    {\r\n\r\n        System.out.println(\"Commands \\t\\t\\t\\t Arguments                               \\t\\t\\t\\t Usage\");\r\n        System.out.println(\"cd       \\t\\t\\t\\t 1- new directory path                   \\t\\t\\t\\t move from one directory to another\");\r\n        System.out.println(\"ls       \\t\\t\\t\\t 1- directory path                       \\t\\t\\t\\t list files and folders in this directory\");\r\n        System.out.println(\"cp       \\t\\t\\t\\t 1- source path \\t 2- destination path \\t\\t\\t\\t copy from one file/directory to another\");\r\n        System.out.println(\"cat      \\t\\t\\t\\t 1- directory path                       \\t\\t\\t\\t print content of a file\");\r\n        System.out.println(\"more     \\t\\t\\t\\t 1- directory path                       \\t\\t\\t\\t print specific part of the content of a file\");\r\n        System.out.println(\"mkdir    \\t\\t\\t\\t 1- directory path                       \\t\\t\\t\\t create a folder\");\r\n        System.out.println(\"rmdir    \\t\\t\\t\\t 1- directory path                       \\t\\t\\t\\t remove the folder if it is empty\");\r\n        System.out.println(\"mv       \\t\\t\\t\\t 1- source path \\t 2- destination path \\t\\t\\t\\t move from one file/directory to another\");\r\n        System.out.println(\"rm       \\t\\t\\t\\t 1- directory path                       \\t\\t\\t\\t remove the folder/file\");\r\n        System.out.println(\"args     \\t\\t\\t\\t 1- command name                         \\t\\t\\t\\t list the parameters for specific command.\");\r\n        System.out.println(\"date     \\t\\t\\t\\t no arguments                            \\t\\t\\t\\t print the current date and time\");\r\n        System.out.println(\"help     \\t\\t\\t\\t no arguments                            \\t\\t\\t\\t list all commands and their arguments\");\r\n        System.out.println(\"pwd      \\t\\t\\t\\t no arguments                            \\t\\t\\t\\t print the current directory path\");\r\n        System.out.println(\"clear    \\t\\t\\t\\t no arguments                            \\t\\t\\t\\t clear the command line screen\");\r\n\r\n    }\r\n    public void clear(){\r\n        //System.out.flush();\r\n        for (int i = 0; i<40;i++){\r\n            System.out.println();\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Terminal.java	(revision f1c0ac8fe327a664c99768cef16d9bcba04c0fd3)
+++ src/Terminal.java	(date 1605131067375)
@@ -1,226 +1,0 @@
-import java.io.File;
-import java.io.FileNotFoundException;
-import java.io.FileWriter;
-import java.io.IOException;
-import java.nio.file.Files;
-import java.nio.file.Path;
-import java.nio.file.Paths;
-import java.util.Date;
-import java.util.Scanner;
-
-public class Terminal {
-    public String workDir;
-    public Terminal(){
-        workDir = getWorkDirectory();
-    }
-    public static String getWorkDirectory(){
-        return System.getProperty("user.dir");
-    }
-    public static boolean PathExist(String path){
-        File file = new File(path);
-        return file.exists();
-    }
-    public String Absolute(String path){
-        File file = new File(path);
-        if(file.isAbsolute()){
-            return path;
-        }
-        return workDir + path;
-    }
-    public static boolean IsFile(String path){
-        File file = new File(path);
-        return file.isFile();
-    }
-    public static boolean IsDirectory(String path){
-        File file = new File(path);
-        return file.isDirectory();
-    }
-    public String readFile(String path) {
-        String content = "";
-        if (!PathExist(path)) {
-            System.out.println("Error:This Path Not Exist.");
-        } else if (!IsFile(path)) {
-            System.out.println("Error:This Path Related to Directory Not File.");
-        } else {
-            try {
-                File file = new File(path);
-                Scanner readScaner = new Scanner(file);
-                while (readScaner.hasNextLine()) {
-                    content += readScaner.nextLine() + "\n";
-                }
-                readScaner.close();
-            } catch (FileNotFoundException e) {
-                System.out.println("Error:Cant Open File.");
-            }
-        }
-        return content;
-    }
-    public void writeFile(String path, String data) {
-        if (!PathExist(path)) {
-            System.out.println("Error:This Path Not Exist.");
-        } else if (!IsFile(path)) {
-            System.out.println("Error:This Path Related to Directory Not File.");
-        } else {
-            try {
-                FileWriter obWriter = new FileWriter(path);
-                obWriter.write(data);
-                obWriter.flush();
-                obWriter.close();
-                System.out.println("Successfully wrote to the file.");
-            } catch (IOException e) {
-                System.out.println("Error:Cant Open File For Write.");
-            }
-        }
-    }
-    public String createFile(String path){
-        File myObj = new File(path);
-            try {
-                if (myObj.createNewFile()) {
-                    System.out.println("File created: " + myObj.getName());
-                } else {
-                    System.out.println("File already exists.");
-                }
-            } catch (IOException e) {
-                System.out.println("An error occurred.");
-            }
-        return myObj.getAbsolutePath();
-    }
-    public void Date(){ //function to print the current date and time
-        Date date = new Date();
-        System.out.println(date.toString());
-    }
-
-    public void mkdir(String path){
-        File newFolder = new File(path);
-        if (newFolder.mkdir()) {
-            System.out.println("Directory is created");
-        }
-        else if(newFolder.exists()){
-            System.out.println("Directory already exists");
-        }
-
-        else {
-            System.out.println("Directory cannot be created");
-        }
-    }
-
-    public void rmdir(String path){
-        File newFolder = new File(path);
-        mkdir(newFolder.getAbsolutePath());
-        String[] folders = ls(newFolder.getAbsolutePath());
-        if(folders.length() == 0)
-        {
-            newFolder.delete();
-            System.out.println("Directory deleted");
-        }
-        else {
-            System.out.println("Directory is not empty, can not delete it");
-        }
-        /*mkdir(path);
-        String[] folders = ls(path);
-        if(folders.length() == 0)
-        {
-            rm(path);
-            System.out.println("Directory deleted");
-        }
-        else {
-            System.out.println("Directory is not empty, can not delete it");
-        }*/
-    }
-    public void mv(String sourcePath, String destinationPath){
-
-    }
-    public void rm(String path){
-        File newFile = new File(path);
-        if(newFile.exists()){
-            newFile.delete();
-        }
-        else{
-            System.out.println("File not found");
-        }
-
-    }
-    public void pwd(){
-        System.out.println();
-        //print current path
-    }
-    public void args(String cmd){
-        String command = cmd.toLowerCase();
-        if(command.equals("cd") ){
-            System.out.println("arg1: new directory path");
-        }
-        else if(command.equals("ls") ){
-            System.out.println("arg1: directory path");
-        }
-        else if(command.equals("cp") ){
-            System.out.println("arg1: source path  -  arg2: destination path");
-        }
-        else if(command.equals("cat") ){
-            System.out.println("arg1: directory path");
-        }
-        else if(command.equals("more") ){
-            System.out.println("arg1: directory path");
-        }
-        else if(command.equals("mkdir") ){
-            System.out.println("arg1: directory path");
-        }
-        else if(command.equals("rmdir") ){
-            System.out.println("arg1: directory path");
-        }
-        else if(command.equals("mv") ){
-            System.out.println("arg1: source path  -  arg2: destination path");
-        }
-        else if(command.equals("rm") ){
-            System.out.println("arg1: directory path");
-        }
-        else if( command.equals("args") ){
-            System.out.println("arg1: command name");
-        }
-        else if(command.equals("date") ){
-            System.out.println("no arguments");
-        }
-        else if(command.equals("help") ){
-            System.out.println("no arguments");
-        }
-        else if(command.equals("pwd") ){
-            System.out.println("no arguments");
-        }
-        else if(command.equals("clear") ){
-            System.out.println("no arguments");
-        }
-        else{
-            System.out.println("Please enter a correct command and to know the commands type HELP");
-        }
-
-    }
-    public void help()
-    {
-
-        System.out.println("Commands \t\t\t\t Arguments                               \t\t\t\t Usage");
-        System.out.println("cd       \t\t\t\t 1- new directory path                   \t\t\t\t move from one directory to another");
-        System.out.println("ls       \t\t\t\t 1- directory path                       \t\t\t\t list files and folders in this directory");
-        System.out.println("cp       \t\t\t\t 1- source path \t 2- destination path \t\t\t\t copy from one file/directory to another");
-        System.out.println("cat      \t\t\t\t 1- directory path                       \t\t\t\t print content of a file");
-        System.out.println("more     \t\t\t\t 1- directory path                       \t\t\t\t print specific part of the content of a file");
-        System.out.println("mkdir    \t\t\t\t 1- directory path                       \t\t\t\t create a folder");
-        System.out.println("rmdir    \t\t\t\t 1- directory path                       \t\t\t\t remove the folder if it is empty");
-        System.out.println("mv       \t\t\t\t 1- source path \t 2- destination path \t\t\t\t move from one file/directory to another");
-        System.out.println("rm       \t\t\t\t 1- directory path                       \t\t\t\t remove the folder/file");
-        System.out.println("args     \t\t\t\t 1- command name                         \t\t\t\t list the parameters for specific command.");
-        System.out.println("date     \t\t\t\t no arguments                            \t\t\t\t print the current date and time");
-        System.out.println("help     \t\t\t\t no arguments                            \t\t\t\t list all commands and their arguments");
-        System.out.println("pwd      \t\t\t\t no arguments                            \t\t\t\t print the current directory path");
-        System.out.println("clear    \t\t\t\t no arguments                            \t\t\t\t clear the command line screen");
-
-    }
-    public void clear(){
-        //System.out.flush();
-        for (int i = 0; i<40;i++){
-            System.out.println();
-        }
-    }
-
-
-
-
-}
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"da5e7cd7-2290-49c6-9254-97e24acccb36\" name=\"Default Changelist\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/Terminal.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Terminal.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"1k8QyYvmsm82WoFLpiNZ8TOy6G8\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"aspect.path.notification.shown\" value=\"true\" />\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"Main\" />\r\n      <module name=\"CLI_V1\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"file://$PROJECT_DIR$\" />\r\n      <RunnerSettings RunnerId=\"Run\" />\r\n      <ConfigurationWrapper RunnerId=\"Run\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.Main\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"SvnConfiguration\">\r\n    <configuration />\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"da5e7cd7-2290-49c6-9254-97e24acccb36\" name=\"Default Changelist\" comment=\"\" />\r\n      <created>1605079993710</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1605079993710</updated>\r\n      <workItem from=\"1605114935497\" duration=\"684000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"WindowStateProjectService\">\r\n    <state width=\"1493\" height=\"213\" key=\"GridCell.Tab.0.bottom\" timestamp=\"1605106420880\">\r\n      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"834\" />\r\n    </state>\r\n    <state width=\"1493\" height=\"213\" key=\"GridCell.Tab.0.bottom/0.0.1536.834@0.0.1536.834\" timestamp=\"1605106420880\" />\r\n    <state width=\"1493\" height=\"213\" key=\"GridCell.Tab.0.center\" timestamp=\"1605106420880\">\r\n      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"834\" />\r\n    </state>\r\n    <state width=\"1493\" height=\"213\" key=\"GridCell.Tab.0.center/0.0.1536.834@0.0.1536.834\" timestamp=\"1605106420880\" />\r\n    <state width=\"1493\" height=\"213\" key=\"GridCell.Tab.0.left\" timestamp=\"1605106420880\">\r\n      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"834\" />\r\n    </state>\r\n    <state width=\"1493\" height=\"213\" key=\"GridCell.Tab.0.left/0.0.1536.834@0.0.1536.834\" timestamp=\"1605106420880\" />\r\n    <state width=\"1493\" height=\"213\" key=\"GridCell.Tab.0.right\" timestamp=\"1605106420880\">\r\n      <screen x=\"0\" y=\"0\" width=\"1536\" height=\"834\" />\r\n    </state>\r\n    <state width=\"1493\" height=\"213\" key=\"GridCell.Tab.0.right/0.0.1536.834@0.0.1536.834\" timestamp=\"1605106420880\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/workspace.xml	(revision f1c0ac8fe327a664c99768cef16d9bcba04c0fd3)
+++ .idea/workspace.xml	(date 1605198697573)
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ChangeListManager">
-    <list default="true" id="da5e7cd7-2290-49c6-9254-97e24acccb36" name="Default Changelist" comment="">
+    <list default="true" id="a22eb827-5ea7-498b-917f-b4f99fd34324" name="Default Changelist" comment="">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/Terminal.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Terminal.java" afterDir="false" />
     </list>
@@ -53,19 +53,35 @@
   </component>
   <component name="TaskManager">
     <task active="true" id="Default" summary="Default task">
-      <changelist id="da5e7cd7-2290-49c6-9254-97e24acccb36" name="Default Changelist" comment="" />
+      <changelist id="a22eb827-5ea7-498b-917f-b4f99fd34324" name="Default Changelist" comment="" />
       <created>1605079993710</created>
       <option name="number" value="Default" />
       <option name="presentableId" value="Default" />
       <updated>1605079993710</updated>
       <workItem from="1605114935497" duration="684000" />
     </task>
+    <task id="LOCAL-00001" summary="Absolute path - returning cmd/args">
+      <created>1605198354539</created>
+      <option name="number" value="00001" />
+      <option name="presentableId" value="LOCAL-00001" />
+      <option name="project" value="LOCAL" />
+      <updated>1605198354539</updated>
+    </task>
+    <option name="localTasksCounter" value="2" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
     <option name="version" value="3" />
   </component>
+  <component name="VcsManagerConfiguration">
+    <MESSAGE value="Absolute path - returning cmd/args" />
+    <option name="LAST_COMMIT_MESSAGE" value="Absolute path - returning cmd/args" />
+  </component>
   <component name="WindowStateProjectService">
+    <state x="395" y="0" key="CommitChangelistDialog2" timestamp="1605198350835">
+      <screen x="0" y="0" width="1536" height="824" />
+    </state>
+    <state x="395" y="0" key="CommitChangelistDialog2/0.0.1536.824@0.0.1536.824" timestamp="1605198350835" />
     <state width="1493" height="213" key="GridCell.Tab.0.bottom" timestamp="1605106420880">
       <screen x="0" y="0" width="1536" height="834" />
     </state>
